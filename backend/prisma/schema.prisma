generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  createdAt DateTime @default(now())

  transactions Transaction[]
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())

  transactions Transaction[]
}

model Transaction {
  id           Int      @id @default(autoincrement())
  date         DateTime
  amount       Float
  description  String
  type         String
  status       String   @default("pending")
  accountId    Int
  categoryId   Int?
  supplierId   Int?
  receiptNote  String?
  receiptImage String?
  isProjected  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  account  Account   @relation(fields: [accountId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  supplier Supplier? @relation(fields: [supplierId], references: [id])
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())

  invoices Invoice[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  type        String
  createdAt   DateTime @default(now())

  invoiceItems InvoiceItem[]
}

model Invoice {
  id         Int       @id @default(autoincrement())
  number     String    @unique
  date       DateTime
  dueDate    DateTime?
  customerId Int
  total      Float
  tax        Float     @default(0)
  status     String    @default("pending")
  type       String
  createdAt  DateTime  @default(now())

  customer Customer      @relation(fields: [customerId], references: [id])
  items    InvoiceItem[]
}

model InvoiceItem {
  id        Int   @id @default(autoincrement())
  invoiceId Int
  productId Int
  quantity  Int
  price     Float

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Tax {
  id        Int       @id @default(autoincrement())
  type      String
  period    String
  revenue   Float
  taxAmount Float
  status    String    @default("pending")
  dueDate   DateTime?
  createdAt DateTime  @default(now())
}
